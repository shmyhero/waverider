import numpy as np
import math
import matplotlib.pyplot as plt
from scipy.stats import norm
from pandas_datareader import data

# download AAPL price data into DataFrame
apple = data.DataReader('AAPL', 'yahoo', start='1/1/2000')

# calculate the compound annual growth rate(CAGR) which
# will give us mean return input(mu)
days = (apple.index[-1] - apple.index[0]).days
cagr = ((((apple['Adj Close'][-1]) / apple['Adj Close'][1]))
        ** (365.0/days)) - 1
print 'CAGR = ', str(round(cagr, 4)*100) + '%'
mu = cagr

# create a series of percentage returns and calculate
# the annual volatility of returns
apple['Returns'] = apple['Adj Close'].pct_change()
vol = apple['Returns'].std() * math.sqrt(252)
print 'Annual Volatilty = ', str(round(vol, 4) * 100) + '%'

# ----------------------------------------------------------------------
# define variables
# starting stock price, i.e. last available real stock price
S = apple['Adj Close'][-1]
T = 252  # number of trading days
mu = 0.2309  # return
vol = 0.4259  # volatility

# setup emply list to hold ending values for each simulation
result = []

# choose number of runs to simulate - I have chosen 1000
for i in range(10):
    # create list of daily returns using random normal distribution
    # mu/T, daily return
    # vol/math.sqrt(T), daily vol
    # T, total random number
    # generate daily change ratio

    # daily_returns = np.random.normal((mu/T), vol/math.sqrt(T), T) + 1
    daily_returns = np.random.normal((1+mu) ** (1/T), vol/math.sqrt(T), T)

    # set starting price and create price series generated by above random daily returns
    price_list = [S]
    for x in daily_returns:
        price_list.append(price_list[-1] * x)  # generate price

    # plot data from each individual run which we will plot at the end
    plt.plot(price_list)

    # append the ending value of each simulated run to the empty list we created at beginning
    result.append(price_list[-1])

# show the plot of multiple price sereis created above
plt.show()

# create histogram of ending stock values for our multiple simulations
plt.hist(result, bins=50)
plt.show()

'''
So we now know that there is a 5% chance that our stock price 
will end up below around $63.52 and a 5% chance it will finish 
above $258.44.

So now we can begin to ask ourselves questions along the lines 
of "am I willing to risk a 5% chance of ending up with a stock 
worth less than $63.52, in order to chase an expected return of 
around 23%, giving us an expected stock price of around $141.15 ? "
'''
print(round(np.mean(result), 2))
print '5% quantile =', np.percentile(result, 5)
print '95% quantile =', np.percentile(result, 95)